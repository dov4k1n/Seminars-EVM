void solve(matrix *A) {
  A->rank = 0;
  int pivot_row, pivot_col;
  double *tmp;
  double scalar;

  pivot_row = -1;
  pivot_col = -1;

  if (fabs(A->data[0][0]) > EPSILON) {
    pivot_row = 0;
    pivot_col = 0;
    A->rank += 1;
  }

  else if (fabs(A->data[1][0]) > EPSILON) {
    // swap rows(1, 0):
    tmp = A->data[1];
    A->data[1] = A->data[0];
    A->data[0] = tmp;

    pivot_row = 0;
    pivot_col = 0;
    A->rank += 1;
  }

  else if (fabs(A->data[2][0]) > EPSILON) {
    // swap rows(2, 0):
    tmp = A->data[2];
    A->data[2] = A->data[0];
    A->data[0] = tmp;

    pivot_row = 0;
    pivot_col = 0;
    A->rank += 1;
  }

  if (pivot_row != -1) {
    scalar = (-1) * A->data[1][pivot_col] / A->data[pivot_row][pivot_col];
    A->data[1][0] += scalar * A->data[pivot_row][0];
    A->data[1][1] += scalar * A->data[pivot_row][1];
    A->data[1][2] += scalar * A->data[pivot_row][2];
    A->data[1][3] += scalar * A->data[pivot_row][3];

    scalar = (-1) * A->data[2][pivot_col] / A->data[pivot_row][pivot_col];
    A->data[2][0] += scalar * A->data[pivot_row][0];
    A->data[2][1] += scalar * A->data[pivot_row][1];
    A->data[2][2] += scalar * A->data[pivot_row][2];
    A->data[2][3] += scalar * A->data[pivot_row][3];
  }

  pivot_row = -1;
  pivot_col = -1;

  if (fabs(A->data[1][1]) > EPSILON) {
    pivot_row = 1;
    pivot_col = 1;
    A->rank += 1;
  }

  else if (fabs(A->data[2][1]) > EPSILON) {
    // swap rows(2, 1):
    tmp = A->data[2];
    A->data[2] = A->data[1];
    A->data[1] = tmp;

    pivot_row = 1;
    pivot_col = 1;
    A->rank += 1;
  }

  if (pivot_row != -1) {
    scalar = (-1) * A->data[2][pivot_col] / A->data[pivot_row][pivot_col];
    A->data[2][0] += scalar * A->data[pivot_row][0];
    A->data[2][1] += scalar * A->data[pivot_row][1];
    A->data[2][2] += scalar * A->data[pivot_row][2];
    A->data[2][3] += scalar * A->data[pivot_row][3];
  }

  pivot_row = -1;
  pivot_col = -1;

  if (fabs(A->data[2][2]) > EPSILON) {
    pivot_row = 2;
    pivot_col = 2;
    A->rank += 1;
  }

  pivot_row = 2;
  pivot_col = -1;
  if (fabs(A->data[pivot_row][2]) > EPSILON) {
    pivot_col = 2;
  }

  if (pivot_col != -1) {
    scalar = 1 / A->data[pivot_row][pivot_col];
    A->data[pivot_row][2] *= scalar;
    A->data[pivot_row][3] *= scalar;

    scalar = (-1) * A->data[1][pivot_col] / A->data[pivot_row][pivot_col];
    A->data[1][1] += scalar * A->data[pivot_row][1];
    A->data[1][2] += scalar * A->data[pivot_row][2];
    A->data[1][3] += scalar * A->data[pivot_row][3];

    scalar = (-1) * A->data[0][pivot_col] / A->data[pivot_row][pivot_col];
    A->data[0][0] += scalar * A->data[pivot_row][0];
    A->data[0][1] += scalar * A->data[pivot_row][1];
    A->data[0][2] += scalar * A->data[pivot_row][2];
    A->data[0][3] += scalar * A->data[pivot_row][3];

  }
  pivot_row = 1;
  pivot_col = -1;
  if (fabs(A->data[pivot_row][1]) > EPSILON) {
    pivot_col = 1;
  }

  else if (fabs(A->data[pivot_row][2]) > EPSILON) {
    pivot_col = 2;
  }

  if (pivot_col != -1) {
    scalar = 1 / A->data[pivot_row][pivot_col];
    A->data[pivot_row][1] *= scalar;
    A->data[pivot_row][2] *= scalar;
    A->data[pivot_row][3] *= scalar;

    scalar = (-1) * A->data[0][pivot_col] / A->data[pivot_row][pivot_col];
    A->data[0][0] += scalar * A->data[pivot_row][0];
    A->data[0][1] += scalar * A->data[pivot_row][1];
    A->data[0][2] += scalar * A->data[pivot_row][2];
    A->data[0][3] += scalar * A->data[pivot_row][3];

  }
  pivot_row = 0;
  pivot_col = -1;
  if (fabs(A->data[pivot_row][0]) > EPSILON) {
    pivot_col = 0;
  }

  else if (fabs(A->data[pivot_row][1]) > EPSILON) {
    pivot_col = 1;
  }

  else if (fabs(A->data[pivot_row][2]) > EPSILON) {
    pivot_col = 2;
  }

  if (pivot_col != -1) {
    scalar = 1 / A->data[pivot_row][pivot_col];
    A->data[pivot_row][0] *= scalar;
    A->data[pivot_row][1] *= scalar;
    A->data[pivot_row][2] *= scalar;
    A->data[pivot_row][3] *= scalar;

  }
}